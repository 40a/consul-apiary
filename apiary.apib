FORMAT: 1A

# Consul HTTP API

The main interface to Consul is a RESTful HTTP API. The API can be used for CRUD
for nodes, services, checks, and configuration. The endpoints are versioned to
enable changes without breaking backwards compatibility.

# Key/Value store [/v1/kv/{key}{?dc,wait,index,token,keys,recurse,separator,read_mode,pretty,raw,flags,cas,acquire,release}]

The KV endpoint is used to expose a simple **key/value store**.  This can be
used to store service configurations or other meta data in a simple way.  It has
only a single endpoint: `/v1/kv/<key>`.

By default the datacenter of the agent is queried, however the dc can be
provided using the `dc` query parameter. If a client wants to write to all
Datacenters, one request per datacenter must be made.

The KV endpoint supports the use of ACL tokens.

+ Parameters
    + dc (optional, string) ... datacenter
    + key (optional, path) ... the key
    + token (optional, string) ... per-request ACL token

## Retrieve key [GET]

Retrieve the specified key, or if `recurse` is provided, return all keys with
the given prefix.  If `keys` is provided, return a list of the keys under the
given prefix; used with `separator`, list only up to a given separator.

A blocking query can be used to wait for a value to change.

If `recurse` is used, the `X-Consul-Index` corresponds to the latest
`ModifyIndex` and so a blocking query waits until any of the listed keys are
updated.

This endpoint supports blocking queries and all consistency modes.

### Response Payload

- `CreateIndex` - internal index value that represents when the entry was created
- `ModifyIndex` - last index that modified this key; corresponds to the `X-Consul-Index` header value
- `LockIndex`   - last index of a successful lock acquisition
- `Key`         - full path of the entry
- `Flags`       - opaque unsigned integer that can be attached to each entry; use of this is left totally to the user
- `Session`     - key provides the session that owns the lock
- `Value`       - a base64 key value

+ Parameters
    + wait = `10m` (optional, interval) ... limits how long query will potentially block for; use with `index`
    + index (optional, handle)          ... initiates a blocking query
    + recurse (optional)                ... return all keys with the given prefix
    + keys (optional)                   ... return a list of the keys under the given prefix
    + separator (optional, string)      ... with `keys`, list only up to a given separator
    + raw (optional)                    ... with non-recursive get, response is raw value of key, without encoding
    + read_mode (optional, enum)        ... consistency mode
        + Values
            + `consistent`
            + `stale`
    + pretty (optional) ... if provided, formatted JSON is returned

+ Response 200 (application/json)
    + Headers
        
            X-Consul-Index: <handle>
            X-Consul-LastContact: last time a server was contacted (ms)
            X-Consul-KnownLeader: boolean if there is a known leader

    + Body

            [
                {
                    "CreateIndex": 100,
                    "ModifyIndex": 200,
                    "LockIndex": 200,
                    "Key": "zip",
                    "Flags": 0,
                    "Value": "dGVzdA==",
                    "Session": "adf4238a-882b-9ddc-4a9d-5b6758e4159e"
                }
            ]

+ Response 404

## Create or Update Key [PUT]

The return value is simply either `true` or `false`.
If `false` is returned, then the update has not taken place.

Complex locking and synchronization operations are possbile.

### Check-And-Set

Clients may build more complex synchronization primives using the Check-And-Set
operation with the `cas` parameter.

If the `cas` value is `0`, Consul will only create the key if it does not already exist.
If the `cas` value is non-zero, then the key is only updated if the index
matches the `ModifyIndex` for the key.

### Locking

Locking is a useful feature that allows leader election to be built on top of
Consul.

Acquire a lock by providing the `acquire` parameter with a valid session ID. If
the lock is not held, this increments the `LockIndex` and sets the `Session`
value of the key in addition to updating the key contents. A key does not need
to exist to be acquired.

Yield a lock by providing the `release` parameter with the ID of the session
holding the lock.Â  This will leave the `LockIndex` unmodified but will clear the
associated `Session` of the key. The key must be held by this session to be
unlocked.

+ Parameters
    + flags (optional, num) ... an unsigned value between 0 and 2^64-1
    
        Opaque to the user, but client applications may use it.

    + cas (optional, num) ... performs a Check-And-Set operation
    + acquire (optional, session) ... performs a lock acquisition operation
    + release (optional, session) ... performs a lock release operation


+ Request

        value of key

+ Response 200 (application/json)

        true

## Delete a Key [DELETE]

Delete a single key or all keys sharing a prefix.

If the `recurse` parameter is provided, then all keys with the prefix are
deleted, otherwise only the specified key.

+ Parameters
    + recurse (optional) ... all keys with the prefix are deleted

+ Response 200
